<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <context:component-scan base-package="com.limitbuy"/>

    <!--引入配置jdbc.properties文件的位置信息和mybatis.properties，路径还是区分大小写 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:conf/jdbc.properties</value>
                <value>classpath:conf/redis.properties</value>
            </list>
        </property>
    </bean>

    <context:annotation-config/>
    <!-- 能够事物管理使用注解的方式 -->
    <!-- 能够事物管理使用注解的方式 -->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
    <!-- 声明一个事物管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!--  自动扫描mapper接口所在文件夹 将Mapper接口生成代理注入到Spring -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.limitbuy.dao"/>
    </bean>

    <!-- 读取jdbc.properties文件，配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
          p:driverClass="${jdbc.driver}" p:jdbcUrl="${jdbc.url}" p:user="${jdbc.user}"
          p:password="${jdbc.password}" p:acquireIncrement="${jdbc.acquireIncrement}"
          p:idleConnectionTestPeriod="${jdbc.idleConnectionTestPeriod}" p:maxPoolSize="${jdbc.maxPoolSize}"
          p:minPoolSize="${jdbc.minPoolSize}" p:maxStatements="${jdbc.maxStatements}"/>

    <!-- 定义 SqlSessionFactory, notice that configLocation is not needed when you use MapperFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>

    </bean>



    <!-- jedis pool配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="512" />  <!-- 最大分配的POOL连接数   -->
        <property name="maxIdle" value="100" />  <!-- 最大能够保持idle(空闲)状态的连接数。-->
        <property name="maxWaitMillis" value="1000" />  <!-- 当池内没有返回连接对象时，最大超时时间， 单位：毫秒  -->
        <property name="testOnBorrow" value="false" /><!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->
    </bean>

    <!-- redis factory -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" lazy-init="true">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${redis_ip}" />
        <property name="port" value="${redis_port}" />
        <property name="timeout" value="${redis_timeout}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" lazy-init="true">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="defaultSerializer" ref="stringRedisSerializer"/>
    </bean>

    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <!--Spring容器启动监听-->
    <bean id="loadListener" class="com.limitbuy.listener.LoadListener"></bean>


</beans>
